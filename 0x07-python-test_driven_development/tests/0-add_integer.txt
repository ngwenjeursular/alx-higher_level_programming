import unittest

from add_integer import add_integer


class TestAddInteger(unittest.TestCase):
    def test_add_integer_two_positives(self):
        self.assertEqual(add_integer(1, 2), 3)

    def test_add_integer_positive_and_negative(self):
        self.assertEqual(add_integer(100, -5), 95)

    def test_add_integer_one_argument(self):
        self.assertEqual(add_integer(2), 100)

    def test_add_integer_floating_point_numbers(self):
        self.assertEqual(add_integer(100.3, -2), 98)

    def test_add_integer_with_non_integer_arguments(self):
        with self.assertRaises(TypeError):
            add_integer(4, "School")

    def test_add_integer_with_none_arguments(self):
        with self.assertRaises(TypeError):
            add_integer(None)

>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(1, 2)
3

>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(100, -5)
95

>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(2)
100

>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(100.3, -2)
98

>>> add_integer(5, "")
Traceback (most recent call last):
TypeError: b must be an integer or float

>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer("School")
Traceback (most recent call last):
TypeError: a must be an integer or float

>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(None)
Traceback (most recent call last):
TypeError: a must be an integer or float

if __name__ == '__main__':
    unittest.main()
